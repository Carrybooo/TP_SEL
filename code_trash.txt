
    unsafe {
        let ptr_to_ptr: *mut *mut c_void = ptr::null_mut();
        let res_memalign = posix_memalign(ptr_to_ptr, size_of::<*mut *mut c_void>(), 0) as i32;

        println!("res_memalign : {}", res_memalign);
    }



    unsafe {
    let mut memptr: *mut *mut c_void = ptr::null_mut() as *mut *mut c_void;
        let ret = libc::posix_memalign(
            (&mut memptr).cast(),
            align_of::<*mut c_void>(),
            size_of::<*mut c_void>(),
        );
        println!("ret : {}", ret);
        assert_eq!(ret, 0, "Failed to allocate or invalid alignment");
    };
